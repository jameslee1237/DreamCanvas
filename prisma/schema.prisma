// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  tags      String?
  feed      String
  image     String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  saves     Save[]
}

model User {
  id           String     @id @default(uuid()) @map("_id")
  clerkId      String     @unique
  firstName    String
  lastName     String
  userName     String
  email        String
  profileImage String?
  posts        Post[]
  followers    Follow[]   @relation("FollowingUsers")
  following    Follow[]   @relation("FollowedUsers")
  likes        Like[]
  saves        Save[]
  comments     Comment[]
  conversations Participant[]
  messages     Message[]
}

model Comment {
  id       String @id @default(uuid()) @map("_id")
  comment  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  postId   String
  post     Post   @relation(fields: [postId], references: [id])
}

model Conversation {
  id              String @id @default(uuid()) @map("_id")
  participants    Participant[]
  lastMessageAt   DateTime @default(now())
  messages        Message[]
}

model Message {
  id              String @id @default(uuid()) @map("_id")
  content         String
  authorId        String
  author          User   @relation(fields: [authorId], references: [id])
  createdAt       DateTime @default(now())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id])
}

model Follow {
  id             String @id @default(uuid()) @map("_id")
  followerId     String
  followingId    String
  follower       User   @relation("FollowedUsers", fields: [followerId], references: [id])
  following      User   @relation("FollowingUsers", fields: [followingId], references: [id])

  @@unique (fields: [followerId, followingId], name: "search_follow")
}

model Like {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  postId    String
  user      User   @relation(fields: [userId], references: [id])
  post      Post   @relation(fields: [postId], references: [id])

  @@unique(fields: [userId, postId], name: "search_like")
}

model Save {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  postId    String
  user      User   @relation(fields: [userId], references: [id])
  post      Post   @relation(fields: [postId], references: [id])

  @@unique(fields: [userId, postId], name: "search_save")
}

model Participant {
  id              String @id @default(uuid()) @map("_id")
  userId          String
  conversationId  String
  user            User         @relation(fields: [userId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])
}